plugins {
    id 'com.gradle.build-scan' version '1.3'
    id 'groovy'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.9.7'
    id "nebula.lint" version "6.8.0"
    id "com.github.ben-manes.versions" version "0.14.0"
}

description = 'Gradle plugin to integrate with AWS ECR'
group = 'com.patdouble'
version = 'SNAPSHOT'

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

pluginBundle {
  website = 'https://bitbucket.org/double16/gradle-aws-ecr-plugin'
  vcsUrl = 'https://bitbucket.org/double16/gradle-aws-ecr-plugin.git'
  description = project.description
  tags = ['container', 'image', 'linux', 'vm', 'docker', 'lightweight', 'aws', 'ecr']

  plugins {
    awsecrPlugin {
      id = 'com.patdouble.awsecr'
      displayName = 'AWS ECR Configuration Plugin'
    }
  }
}

// Set product version if tag is given on CI
System.getenv('CIRCLE_TAG')?.eachMatch(/^[0-9]+(\.[0-9]+)*$/) { m -> project.version = m[0] }

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

repositories {
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'com.bmuschko:gradle-docker-plugin:3.0.5'
    compile 'com.amazonaws:aws-java-sdk-ecr:1.11.76'
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testCompile 'cglib:cglib-nodep:3.1'
}

tasks.publishPlugins.doFirst {
    assert !project.version.contains('SNAPSHOT')
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId rootProject.group
            artifactId rootProject.name
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = DELEGATE_FIRST
                    name rootProject.name
                    description rootProject.description
                }
            }
        }
    }
}

task install(dependsOn: 'publishToMavenLocal')

task primeCache {
	group = "staging"
    doLast {
		project.rootProject.allprojects.each { subProject ->
			logger.info "Priming ${subProject.name}, configs = ${subProject.buildscript.configurations*.name}"
			subProject.buildscript.configurations*.resolve()
			logger.info "Priming ${subProject.name}, configs = ${subProject.configurations*.name}"
			subProject.configurations*.resolve()
		}
	}
}
